Aim: Consider telephone book database of N clients. Make use of a hash table implementation to quickly look up clientâ€™s telephone number. Make use of two collision handling techniques and compare them using number of comparisons required to find a set of telephone numbers.
Program: 
#include<iostream>
#include<string.h>
using namespace std;
struct node {
    int value;
    node* next;
}*HashTable[10];
class hashing{
    public:
    hashing() {
        for(int i=0;i<10;i++){
            HashTable[i] = NULL;
        }
    }
    int HashFunction(int value){
        return(value%10);
    }
    node*create_node(int x){
        node*temp = new node;
        temp->next=NULL;
        temp->value=x;
        return temp;
    }
    void display(){
        for(int i=0;i<10;i++){
            node*temp= new node;
            temp=HashTable[i];
            cout<<"a["<<i<<"]";
            while(temp != NULL){
                cout<<"->"<<temp->value;
                temp = temp->next;
            }
            cout<<"\n";
        }
    }
    int searchElement(int value){
        bool flag = false;
        int hash_val = HashFunction(value);
        node*entry = HashTable[hash_val];
        cout<<"\nElement found at: ";
        while(entry!= NULL){
            if(entry->value==value){
                cout<<hash_val<<" : "<<entry->value<<endl;
                flag = true;
            }
            entry = entry->next;
        }
        if(!flag){
            return -1;
    	}
    }
    void deleteElement(int value){
        int hash_val = HashFunction(value);
        node*entry = HashTable[hash_val];
        if(entry == NULL){
            cout<<"No Element found";
            return;
        }
        if(entry->value == value){
            HashTable[hash_val] = entry->next;
            return;
        }
        while((entry->next)->value != value){
            entry = entry->next;
        }
        entry->next = (entry->next)->next;
    }
    void insertElement(int value) {
        int hash_val = HashFunction(value);
        node*temp = new node;
        node*head = new node;
        head = create_node(value);
        temp = HashTable[hash_val];
        if(temp == NULL){
            HashTable[hash_val] = head;
        }
        else{
            while(temp->next != NULL){
                temp = temp->next;
            }
            temp->next = head;
        }
    }
};
int main(){
	int ch;
	int data,search,del;
	hashing h;
	do{
		cout<<"\nTelephone : \n1.Insert\n2.Display\n3.Search\n4.Delete\n5.Exit\n";
		cin>>ch;
		switch(ch){
			case 1:
				cout<<"\nEnter phone no. to be inerted : ";
				cin>>data;
				h.insertElement(data);
				break;
			case 2:
				h.display();
				break;
			case 3:
				cout<<"\nEnter the no. to be searched : ";
				cin>>search;
				if(h.searchElement(search) == -1){
					cout<<"No element found at key.";
					continue;
				} break;
			case 4:
				cout<<"\nEnter the phone no. to be deleted : ";
				cin>>del;
				h.deleteElement(del);
				cout<<"Phone no. Deleted"<<endl;
				break;	
		}
	}while(ch!=5);
	return 0;
}
Output:
[administrators@fedora ~]$ gcc phonebook.cpp -lstdc++
[administrators@fedora ~]$ ./a.out
Telephone : 
1.Insert
2.Display
3.Search
4.Delete
5.Exit
1
Enter phone no. to be inserted : 123
Telephone : 
1.Insert
2.Display
3.Search
4.Delete
5.Exit
1
Enter phone no. to be inserted : 546
Telephone : 
1.Insert
2.Display
3.Search
4.Delete
5.Exit
1
Enter phone no. to be inserted : 446
Telephone : 
1.Insert
2.Display
3.Search
4.Delete
5.Exit
2
a[0]
a[1]
a[2]
a[3]->123
a[4]
a[5]
a[6]->546->446
a[7]
a[8]
a[9]
Telephone : 
1.Insert
2.Display
3.Search
4.Delete
5.Exit
3
Enter the no. to be Searched : 123
Element found at: 3 : 123
Telephone : 
1.Insert
2.Display
3.Search
4.Delete
5.Exit
4
Enter the phone no. to be deleted : 546
Phone no. Deleted
Telephone : 
1.Insert
2.Display
3.Search
4.Delete
5.Exit
2
a[0]
a[1]
a[2]
a[3]->123
a[4]
a[5]
a[6]->446
a[7]
a[8]
a[9]
Telephone : 
1.Insert
2.Display
3.Search
4.Delete
5.Exit
5
[administrators@fedora ~]$
